# =================================================================
# Fichier     : Step6_ExecuteAll.ps1
# Role        : Centre commercial principal pour l'ex√©cution de toutes les actions
# Magasins    : - Magasin des fonctions (copie des fonctions n√©cessaires)
#               - Magasin des ex√©cutions (s√©quence d'actions)
# =================================================================

# V√©rification des droits d'administrateur
$isAdmin = ([Security.Principal.WindowsPrincipal] [Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è Ce script n√©cessite des droits d'administrateur." -ForegroundColor Yellow
    Write-Host "Relancement du script avec les droits d'administrateur..." -ForegroundColor Cyan
    
    try {
        Start-Process pwsh.exe -ArgumentList "-NoProfile -ExecutionPolicy Bypass -File `"$PSCommandPath`"" -Verb RunAs -Wait
        exit
    }
    catch {
        Write-Host "‚ùå Impossible d'obtenir les droits d'administrateur: $_" -ForegroundColor Red
        exit 1
    }
}

# ===== Inclusions des modules =====
# Inclusion de notre module de gestion du registre
$registryManagerPath = Join-Path $PSScriptRoot "Step7_RegistryManager.ps1"
if (Test-Path $registryManagerPath) {
    . $registryManagerPath
} else {
    Write-Host "‚ùå Module de gestion du registre non trouv√©: $registryManagerPath" -ForegroundColor Red
}

# Inclusion du module de gestion des adresses MAC
$macAddressPath = Join-Path $PSScriptRoot "Step4_MacAddress.ps1"
if (Test-Path $macAddressPath) {
    . $macAddressPath
    Write-Host "‚úì Module de gestion des adresses MAC charg√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå Module de gestion des adresses MAC non trouv√©: $macAddressPath" -ForegroundColor Red
}

# Inclusion du module de gestion des fichiers
$fileManagerPath = Join-Path $PSScriptRoot "Step5_FileManager.ps1"
if (Test-Path $fileManagerPath) {
    . $fileManagerPath
    Write-Host "‚úì Module de gestion des fichiers charg√©" -ForegroundColor Green
} else {
    Write-Host "‚ùå Module de gestion des fichiers non trouv√©: $fileManagerPath" -ForegroundColor Red
}

# ===== Magasin des fonctions import√©es =====

# ----- Fonctions MAC -----
# Les fonctions MAC sont maintenant import√©es depuis Step4_MacAddress.ps1

# Fonction r√©utilisable pour afficher le r√©sum√© des actions
function Show-ActionSummary {
    param (
        [Parameter(Mandatory=$true)]
        [bool]$MacSuccess,
        [Parameter(Mandatory=$true)]
        [bool]$StorageSuccess,
        [Parameter(Mandatory=$true)]
        [bool]$MachineGuidSuccess,
        [Parameter(Mandatory=$false)]
        [string]$StorageMessage = ""
    )
    
    # Cr√©er la fen√™tre de r√©sum√© avec les boutons - Augmentation de la taille
    $summaryForm = New-Object System.Windows.Forms.Form
    $summaryForm.Text = "R√©sum√©"
    $summaryForm.Size = New-Object System.Drawing.Size(450, 350) # Taille augment√©e
    $summaryForm.StartPosition = "CenterScreen"
    $summaryForm.BackColor = [System.Drawing.Color]::FromArgb(30,30,30)
    $summaryForm.ForeColor = [System.Drawing.Color]::White
    $summaryForm.FormBorderStyle = [System.Windows.Forms.FormBorderStyle]::FixedSingle
    $summaryForm.MaximizeBox = $false
    $summaryForm.TopMost = $true
    
    # Label de r√©sum√© avec meilleure mise en forme et gestion du message Storage
    $storageResultMessage = if($StorageSuccess) {
        if($StorageMessage -eq "Le fichier storage.json n'existe pas.") {
            "Fichier d√©j√† supprim√©"
        } else {
            "Fichier supprim√© avec succ√®s"
        }
    } else {
        "√âchec - $StorageMessage"
    }
    
    $summaryLabel = New-Object System.Windows.Forms.Label
    $summaryLabel.Text = @"
R√©sum√© des actions :

$(if($MacSuccess){"‚úÖ"}else{"‚ùå"}) MAC Address: $(if($MacSuccess){"Modifi√©e avec succ√®s"}else{"√âchec"})
$(if($MachineGuidSuccess){"‚úÖ"}else{"‚ùå"}) MachineGuid: $(if($MachineGuidSuccess){"R√©initialis√© avec succ√®s"}else{"√âchec"})
$(if($StorageSuccess){"‚úÖ"}else{"‚ùå"}) Storage: $storageResultMessage

Veuillez proc√©der √† votre nouvelle inscription sur cursor.com
"@
    $summaryLabel.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $summaryLabel.ForeColor = [System.Drawing.Color]::White
    $summaryLabel.TextAlign = [System.Drawing.ContentAlignment]::MiddleCenter
    $summaryLabel.Size = New-Object System.Drawing.Size(430, 160) # Taille augment√©e
    $summaryLabel.Location = New-Object System.Drawing.Point(10, 20)
    $summaryForm.Controls.Add($summaryLabel)
    
    # Bouton Cursor
    $btnCursor = New-Object System.Windows.Forms.Button
    $btnCursor.Text = "Aller sur cursor.com"
    $btnCursor.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $btnCursor.Size = New-Object System.Drawing.Size(200, 35)
    $btnCursor.Location = New-Object System.Drawing.Point(125, 190) # Position ajust√©e
    $btnCursor.BackColor = [System.Drawing.Color]::FromArgb(255,140,0)
    $btnCursor.ForeColor = [System.Drawing.Color]::White
    $btnCursor.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    $btnCursor.FlatAppearance.BorderSize = 1
    $btnCursor.FlatAppearance.BorderColor = [System.Drawing.Color]::FromArgb(255,140,0)
    $btnCursor.Cursor = [System.Windows.Forms.Cursors]::Hand
    $btnCursor.Add_Click({
        Start-Process "https://cursor.com"
    })
    $summaryForm.Controls.Add($btnCursor)
    
    # Bouton Emails Temporaires
    $btnExtension = New-Object System.Windows.Forms.Button
    $btnExtension.Text = "Emails Temporaires"
    $btnExtension.Font = New-Object System.Drawing.Font("Segoe UI", 10)
    $btnExtension.Size = New-Object System.Drawing.Size(200, 35)
    $btnExtension.Location = New-Object System.Drawing.Point(125, 240) # Position ajust√©e
    $btnExtension.BackColor = [System.Drawing.Color]::FromArgb(255,140,0)
    $btnExtension.ForeColor = [System.Drawing.Color]::White
    $btnExtension.FlatStyle = [System.Windows.Forms.FlatStyle]::Flat
    $btnExtension.FlatAppearance.BorderSize = 1
    $btnExtension.FlatAppearance.BorderColor = [System.Drawing.Color]::FromArgb(255,140,0)
    $btnExtension.Cursor = [System.Windows.Forms.Cursors]::Hand
    $btnExtension.Add_Click({
        Start-Process "https://chromewebstore.google.com/detail/temporary-email-emailonde/mkpcaklladfpajiaikehdinfaabmnajh"
    })
    $summaryForm.Controls.Add($btnExtension)
    
    # Afficher la fen√™tre de r√©sum√©
    $summaryForm.ShowDialog()
}

# ----- Fonctions d'ex√©cution -----
function Start-AllActions {
    param (
        [switch]$SkipMacChange,
        [switch]$SkipGuidChange,
        [switch]$SkipFileCleanup
    )
    
    Write-Host "`nüè™ D√©marrage de toutes les actions..." -ForegroundColor Cyan
    $results = @{
        MAC = $false
        Storage = $false
        MachineGuid = $false
    }
    
    try {
        # √âtape 1 : Modification de l'adresse MAC
        if (-not $SkipMacChange) {
        Write-Host "`n=== √âtape 1: Modification de l'adresse MAC ===" -ForegroundColor Yellow
        $adapter = Get-NetworkAdapters | Select-Object -First 1
        if ($adapter) {
                # Am√©liorer l'affichage pour les cartes Realtek (Gigabyte)
                $adapterDesc = $adapter.InterfaceDescription
                if ($adapterDesc -match "Realtek PCIe GbE Family Controller") {
                    Write-Host "  ‚úì Adaptateur trouv√©: Gigabyte Ethernet [$($adapter.Name)]" -ForegroundColor Green
                } else {
                    Write-Host "  ‚úì Adaptateur trouv√©: $adapterDesc [$($adapter.Name)]" -ForegroundColor Green
                }
                
            $newMac = New-MacAddress
            if ($newMac) {
                    # Appel avec les param√®tres corrects pour garantir la d√©sactivation/r√©activation
                    $macResult = Set-MacAddress -AdapterName $adapter.Name -MacAddress $newMac
                    $results.MAC = ($macResult -eq $true)
                    
                if ($results.MAC) {
                        Write-Host "  ‚úì Adresse MAC modifi√©e avec succ√®s: $newMac" -ForegroundColor Green
                    Write-Host "  ‚è≥ Attente de la reconnexion r√©seau (10 secondes)..." -ForegroundColor Yellow
                    Start-Sleep -Seconds 10
                    } else {
                        Write-Host "  ‚ùå √âchec de la modification de l'adresse MAC" -ForegroundColor Red
                    }
                }
            }
        } else {
            Write-Host "`n=== √âtape 1: Modification de l'adresse MAC [IGNOR√âE] ===" -ForegroundColor Gray
        }

        # √âtape 2 : Modification du MachineGuid
        if (-not $SkipGuidChange) {
            Write-Host "`n=== √âtape 2: Modification du MachineGuid ===" -ForegroundColor Yellow
            $guidResult = Reset-MachineGuid
            $results.MachineGuid = $guidResult.Success
            if ($results.MachineGuid) {
                Write-Host "  ‚úì MachineGuid modifi√© avec succ√®s" -ForegroundColor Green
                Write-Host "    Ancien: $($guidResult.OldValue)" -ForegroundColor Gray
                Write-Host "    Nouveau: $($guidResult.NewValue)" -ForegroundColor Green
            } else {
                Write-Host "  ‚ùå √âchec de la modification du MachineGuid: $($guidResult.Message)" -ForegroundColor Red
            }
        } else {
            Write-Host "`n=== √âtape 2: Modification du MachineGuid [IGNOR√âE] ===" -ForegroundColor Gray
        }

        # √âtape 3 : Suppression du fichier storage.json
        if (-not $SkipFileCleanup) {
            Write-Host "`n=== √âtape 3: Suppression du fichier storage.json ===" -ForegroundColor Yellow
        $storageResult = Remove-CursorStorage
        $results.Storage = $storageResult.Success
            if ($results.Storage) {
                if ($storageResult.Message -match "n'existe pas") {
                    Write-Host "  ‚úì Fichier storage.json d√©j√† supprim√©" -ForegroundColor Green
                } else {
                    Write-Host "  ‚úì Fichier storage.json supprim√© avec succ√®s" -ForegroundColor Green
                }
            } else {
                Write-Host "  ‚ùå √âchec de la suppression: $($storageResult.Message)" -ForegroundColor Red
            }
        } else {
            Write-Host "`n=== √âtape 3: Suppression du fichier storage.json [IGNOR√âE] ===" -ForegroundColor Gray
        }

        # R√©sum√© des actions
        Write-Host "`n=== R√©sum√© des actions ===" -ForegroundColor Magenta
        Write-Host "  MAC Address: $(if ($results.MAC) { "‚úì Succ√®s" } else { "‚ùå √âchec" })" -ForegroundColor $(if ($results.MAC) { "Green" } else { "Red" })
        Write-Host "  MachineGuid: $(if ($results.MachineGuid) { "‚úì Succ√®s" } else { "‚ùå √âchec" })" -ForegroundColor $(if ($results.MachineGuid) { "Green" } else { "Red" })
        Write-Host "  Storage: $(if ($results.Storage) { "‚úì Succ√®s" } else { "‚ùå √âchec" })" -ForegroundColor $(if ($results.Storage) { "Green" } else { "Red" })

        return $results
    } catch {
        Write-Host "‚ùå Erreur lors de l'ex√©cution des actions: $_" -ForegroundColor Red
        return $results
    }
} 

function Execute-AllActions {
    param (
        [Parameter(Mandatory=$true)]
        [string]$MacAddress,
        [Parameter(Mandatory=$false)]
        [string]$InterfaceName = "",
        [Parameter(Mandatory=$true)]
        [bool]$ShouldResetMachineGuid,
        [Parameter(Mandatory=$true)]
        [bool]$ShouldDeleteStorageFile,
        [Parameter(Mandatory=$false)]
        [System.Windows.Forms.ProgressBar]$ProgressControl = $null,
        [Parameter(Mandatory=$false)]
        [System.Windows.Forms.Label]$StatusLabel = $null
    )
    
    # Initialisation du tableau de r√©sultats
        $results = @{
            MAC = $false
        MachineGuid = $false
            Storage = $false
    }

    # Tenir un journal des messages (pour le r√©sum√©)
    $storageMessage = ""
    
    # Fonction pour mettre √† jour la progression - Avec plus d'√©tapes interm√©diaires
    function Update-Progress {
        param (
            [int]$Value,
            [string]$StatusText
        )
        
        if ($ProgressControl) {
            # Transition progressive de la barre
            $currentValue = $ProgressControl.Value
            $step = if ($Value -gt $currentValue) { 5 } else { -5 }
            
            while ($currentValue -ne $Value) {
                $currentValue += $step
                if (($step -gt 0 -and $currentValue -gt $Value) -or 
                    ($step -lt 0 -and $currentValue -lt $Value)) {
                    $currentValue = $Value
                }
                $ProgressControl.Value = $currentValue
                Start-Sleep -Milliseconds 30
                [System.Windows.Forms.Application]::DoEvents()
            }
        }
        
        if ($StatusLabel -and $StatusText) {
            $StatusLabel.Text = $StatusText
        }
        
        # Permettre √† l'interface de se mettre √† jour
                [System.Windows.Forms.Application]::DoEvents()
            }
            
    # 1. Modifier MAC Address si n√©cessaire
    if ($MacAddress -ne "") {
        try {
            Write-Host "Modification de l'adresse MAC..."
            Update-Progress -Value 10 -StatusText "Pr√©paration de la modification MAC..."
            
            # Si le nom d'interface n'est pas sp√©cifi√©, nous utilisons la premi√®re interface active
            if ($InterfaceName -eq "") {
                Update-Progress -Value 15 -StatusText "Recherche d'interfaces r√©seau..."
                $adapter = Get-NetAdapter | Where-Object { $_.Status -eq "Up" } | Select-Object -First 1
                if ($adapter) {
                    $InterfaceName = $adapter.Name
                    Update-Progress -Value 20 -StatusText "Interface trouv√©e: $InterfaceName"
                }
                else {
                    Write-Host "Aucune interface r√©seau active trouv√©e." -ForegroundColor Red
                    Update-Progress -Value 100 -StatusText "Erreur: Aucune interface r√©seau active trouv√©e"
                    return @{
                        Results = $results
                        StorageMessage = $storageMessage
                    }
                }
            }
            
            # Appeler la fonction pour changer l'adresse MAC
            Update-Progress -Value 25 -StatusText "Modification de l'adresse MAC en cours..."
            
            # V√©rification si nous sommes en mode test
            if ($env:TEST_MODE -eq $true) {
                # Mode test - simulation
                Write-Host "SIMULATION: Modification de l'adresse MAC de $InterfaceName √† $MacAddress"
                $results.MAC = $true
                            } else {
                # Modification r√©elle de l'adresse MAC avec les param√®tres corrects
                Write-Host "Appel de Set-MacAddress avec AdapterName=$InterfaceName et MacAddress=$MacAddress"
                $macResult = Set-MacAddress -AdapterName $InterfaceName -MacAddress $MacAddress
                $results.MAC = ($macResult -eq $true)
            }
            
            if ($results.MAC) {
                Write-Host "Adresse MAC modifi√©e avec succ√®s." -ForegroundColor Green
                Update-Progress -Value 35 -StatusText "Adresse MAC modifi√©e avec succ√®s"
                
                # La fonction Set-MacAddress d√©sactive et r√©active d√©j√† la carte r√©seau
                # Il n'est donc pas n√©cessaire d'attendre dans une boucle, simplement attendre un d√©lai fixe
                Write-Host "Attente apr√®s la modification de l'adresse MAC (5 secondes)..." -ForegroundColor Yellow
                Update-Progress -Value 40 -StatusText "Attente apr√®s modification..."
                Start-Sleep -Seconds 5
                Update-Progress -Value 50 -StatusText "Modification MAC termin√©e"
                    } else {
                Write-Host "√âchec de la modification de l'adresse MAC." -ForegroundColor Red
                Update-Progress -Value 50 -StatusText "√âchec de la modification MAC"
                    }
                }
                catch {
            Write-Host "Erreur lors de la modification de l'adresse MAC: $_" -ForegroundColor Red
            Update-Progress -Value 50 -StatusText "Erreur: Modification MAC Address"
            $results.MAC = $false
        }
    }

    # 2. R√©initialiser MachineGuid si n√©cessaire
    if ($ShouldResetMachineGuid) {
        try {
            Write-Host "R√©initialisation du MachineGuid..."
            Update-Progress -Value 55 -StatusText "R√©initialisation du MachineGuid..."
            
            # En mode test, on simule la r√©initialisation
            if ($env:TEST_MODE -eq $true) {
                Write-Host "SIMULATION: R√©initialisation du MachineGuid r√©ussie"
                $results.MachineGuid = $true
            } else {
                $guidResult = Reset-MachineGuid
                $results.MachineGuid = $guidResult.Success
            }
            
            if ($results.MachineGuid) {
                Write-Host "MachineGuid r√©initialis√© avec succ√®s." -ForegroundColor Green
                Update-Progress -Value 70 -StatusText "MachineGuid r√©initialis√©"
            } else {
                Write-Host "√âchec de la r√©initialisation du MachineGuid." -ForegroundColor Red
                Update-Progress -Value 70 -StatusText "√âchec r√©initialisation MachineGuid"
            }
        }
        catch {
            Write-Host "Erreur lors de la r√©initialisation du MachineGuid: $_" -ForegroundColor Red
            Update-Progress -Value 70 -StatusText "Erreur: R√©initialisation MachineGuid"
            $results.MachineGuid = $false
        }
    } else {
        Update-Progress -Value 70 -StatusText "R√©initialisation MachineGuid ignor√©e"
    }

    # 3. Supprimer le fichier storage.json si n√©cessaire
    if ($ShouldDeleteStorageFile) {
        try {
            Write-Host "Suppression du fichier storage.json..."
            Update-Progress -Value 75 -StatusText "V√©rification du fichier storage.json..."
            
            $filePath = "$env:APPDATA\Cursor\storage.json"
            
            # En mode test, on simule la suppression
            if ($env:TEST_MODE -eq $true) {
                Write-Host "SIMULATION: Suppression du fichier storage.json"
                $results.Storage = $true
                $storageMessage = "Le fichier storage.json a √©t√© simul√© comme supprim√©."
            } else {
                if (Test-Path $filePath) {
                    Update-Progress -Value 80 -StatusText "Suppression du fichier storage.json..."
                    Remove-Item -Path $filePath -Force
                    $results.Storage = $true
                    Write-Host "Fichier storage.json supprim√© avec succ√®s." -ForegroundColor Green
                    $storageMessage = ""
                }
                else {
                    $storageMessage = "Le fichier storage.json n'existe pas."
                    Write-Host $storageMessage -ForegroundColor Yellow
                    $results.Storage = $true  # Consid√©r√© comme succ√®s car l'objectif est que le fichier n'existe pas
                }
            }
            
            Update-Progress -Value 90 -StatusText "Gestion du fichier storage.json termin√©e"
        }
        catch {
            $storageMessage = "Erreur: $_"
            Write-Host "Erreur lors de la suppression du fichier storage.json: $_" -ForegroundColor Red
            Update-Progress -Value 90 -StatusText "Erreur: Suppression storage.json"
            $results.Storage = $false
        }
    } else {
        Update-Progress -Value 90 -StatusText "Suppression storage.json ignor√©e"
    }

    # 4. Mise √† jour finale
    Update-Progress -Value 100 -StatusText "Termin√©"

    # 5. Retourner les r√©sultats
    return @{
        Results = $results
        StorageMessage = $storageMessage
    }
}

# Interface pour le bouton "Executer toutes les actions"
function Initialize-ExecuteAllButton {
    param (
        [System.Windows.Forms.Form]$Form
    )
    
    # Cr√©ation du bouton
    $button = New-Object System.Windows.Forms.Button
    $button.Text = "Ex√©cuter toutes les actions"
    $button.Location = New-Object System.Drawing.Point(15, 15)
    $button.Width = 200
    $button.Height = 40
    $button.Font = New-Object System.Drawing.Font("Segoe UI", 9, [System.Drawing.FontStyle]::Regular)
    
    # Cr√©ation de la barre de progression
    $progressBar = New-Object System.Windows.Forms.ProgressBar
    $progressBar.Location = New-Object System.Drawing.Point(15, 65)
    $progressBar.Size = New-Object System.Drawing.Size(200, 20)
    $progressBar.Style = 'Continuous'
    $progressBar.Value = 0
    $Form.Controls.Add($progressBar)
    
    # Cr√©ation du label de statut
    $statusLabel = New-Object System.Windows.Forms.Label
    $statusLabel.Location = New-Object System.Drawing.Point(15, 95)
    $statusLabel.Size = New-Object System.Drawing.Size(200, 40)
    $statusLabel.Font = New-Object System.Drawing.Font("Segoe UI", 9, [System.Drawing.FontStyle]::Regular)
    $statusLabel.Text = "Pr√™t"
    $Form.Controls.Add($statusLabel)
    
    # Gestionnaire d'√©v√©nements du bouton
    $button.Add_Click({
        # Lire les valeurs des champs
        $newMacAddress = $textBoxMac.Text.Trim()
        $resetMachineGuid = $checkboxGuid.Checked
        $deleteStorage = $checkboxStorage.Checked
        
        # Interface s√©lectionn√©e
        $selectedAdapter = $null
        if ($comboboxAdapters.SelectedItem) {
            $selectedAdapter = $comboboxAdapters.SelectedItem.ToString()
        }
        
        # V√©rifier qu'au moins une action est s√©lectionn√©e
        if ($newMacAddress -eq "" -and -not $resetMachineGuid -and -not $deleteStorage) {
            [System.Windows.Forms.MessageBox]::Show("Veuillez s√©lectionner au moins une action √† effectuer.", "Erreur", [System.Windows.Forms.MessageBoxButtons]::OK, [System.Windows.Forms.MessageBoxIcon]::Warning)
            return
        }
        
        # Confirmer avant ex√©cution
        $confirmResult = [System.Windows.Forms.MessageBox]::Show(
            "Voulez-vous vraiment ex√©cuter ces actions ?`n`n" + 
            $(if($newMacAddress -ne ""){"- Modifier l'adresse MAC √† $newMacAddress`n"} else {""}) +
            $(if($resetMachineGuid){"- R√©initialiser le MachineGuid`n"} else {""}) +
            $(if($deleteStorage){"- Supprimer le fichier storage.json`n"} else {""}),
            "Confirmation",
            [System.Windows.Forms.MessageBoxButtons]::YesNo,
            [System.Windows.Forms.MessageBoxIcon]::Question
        )
        
        if ($confirmResult -eq [System.Windows.Forms.DialogResult]::Yes) {
            # Ex√©cuter les actions s√©lectionn√©es
            $progressBar.Value = 0
            $statusLabel.Text = "Ex√©cution des actions..."
            
            $result = Execute-AllActions -MacAddress $newMacAddress -InterfaceName $selectedAdapter -ShouldResetMachineGuid $resetMachineGuid -ShouldDeleteStorageFile $deleteStorage
            
            # Afficher le r√©sum√© des actions
            Show-ActionSummary -MacSuccess $result.Results.MAC -StorageSuccess $result.Results.Storage -MachineGuidSuccess $result.Results.MachineGuid -StorageMessage $result.StorageMessage
        }
    })
    
    # Ajustement de la taille du formulaire
    $Form.ClientSize = New-Object System.Drawing.Size(230, 150)
    $Form.FormBorderStyle = 'FixedDialog'
    $Form.MaximizeBox = $false
    $Form.StartPosition = 'CenterScreen'
    $Form.Text = "Ex√©cution des actions"
    
    return $button
}

# Si le script est ex√©cut√© directement, lancer les actions
if ($MyInvocation.InvocationName -ne '.') {
    # V√©rifier si on veut l'interface graphique
    if ($args -contains "-GUI") {
        Add-Type -AssemblyName System.Windows.Forms
        $form = New-Object System.Windows.Forms.Form
        $button = Initialize-ExecuteAllButton -Form $form
        $form.Controls.Add($button)
        $form.ShowDialog()
    } else {
        Start-AllActions
    }
}





