# =================================================================
# Fichier     : Step9_Initialization.ps1
# Role        : Initialisation du syst√®me
# Description : G√®re l'initialisation coordonn√©e de tous les modules du syst√®me
# =================================================================

# V√©rifie si tous les modules syst√®me sont pr√©sents
function Test-RequiredModules {
    Write-ConsoleLog "üîç V√©rification des modules requis..." -Color Cyan
    
    try {
        # Appel au module de test des fichiers
        $testResult = Test-AllRequiredFiles
        
        if ($testResult.Success) {
            Write-Log "Tous les modules requis sont pr√©sents" -Level "SUCCESS"
            Write-ConsoleLog "‚úÖ Tous les modules requis sont pr√©sents" -Color Green
            return $true
        } else {
            $missingFiles = $testResult.MissingFiles -join ", "
            Write-Log "Modules manquants: $missingFiles" -Level "ERROR"
            Write-ConsoleLog "‚ùå Modules manquants: $missingFiles" -Color Red
            return $false
        }
    } 
    catch {
        $errorMessage = "Erreur lors de la v√©rification des modules requis: $_"
        Write-Log $errorMessage -Level "ERROR"
        Write-ConsoleLog "‚ùå $errorMessage" -Color Red
        return $false
    }
}

# V√©rifie si le syst√®me dispose des privil√®ges administrateur
function Test-AdminPrivileges {
    Write-ConsoleLog "üîç V√©rification des privil√®ges administrateur..." -Color Cyan
    
    try {
        $isAdmin = Test-Administrator
        
        if ($isAdmin) {
            Write-Log "L'application s'ex√©cute avec des privil√®ges administrateur" -Level "SUCCESS"
            Write-ConsoleLog "‚úÖ Privil√®ges administrateur confirm√©s" -Color Green
            return $true
        } else {
            Write-Log "L'application s'ex√©cute sans privil√®ges administrateur" -Level "WARNING"
            Write-ConsoleLog "‚ö†Ô∏è Absence de privil√®ges administrateur" -Color Yellow
            return $false
        }
    }
    catch {
        $errorMessage = "Erreur lors de la v√©rification des privil√®ges administrateur: $_"
        Write-Log $errorMessage -Level "ERROR"
        Write-ConsoleLog "‚ùå $errorMessage" -Color Red
        return $false
    }
}

# Initialise le syst√®me r√©seau
function Initialize-NetworkSystem {
    param (
        [Parameter(Mandatory=$false)]
        $ProgressBar = $null
    )
    
    Write-ConsoleLog "üîç Initialisation du syst√®me r√©seau..." -Color Cyan
    
    try {
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Initialisation du r√©seau..." -PercentComplete 25
        }
        
        # Initialisation du module de gestion des adaptateurs r√©seau
        $networkAdapterInitialized = Initialize-NetworkAdapter
        
        if ($networkAdapterInitialized) {
            Write-Log "Module de gestion des adaptateurs r√©seau initialis√© avec succ√®s" -Level "SUCCESS"
            Write-ConsoleLog "‚úÖ Module de gestion des adaptateurs r√©seau initialis√©" -Color Green
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "Suite de l'initialisation..." -PercentComplete 50
            }
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "Syst√®me r√©seau initialis√©" -PercentComplete 100
            }
            
            return $true
        } else {
            Write-Log "√âchec de l'initialisation du module de gestion des adaptateurs r√©seau" -Level "ERROR"
            Write-ConsoleLog "‚ùå √âchec de l'initialisation du module de gestion des adaptateurs r√©seau" -Color Red
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "Erreur d'initialisation" -PercentComplete 100
            }
            
            return $false
        }
    }
    catch {
        $errorMessage = "Erreur lors de l'initialisation du syst√®me r√©seau: $_"
        Write-Log $errorMessage -Level "ERROR"
        Write-ConsoleLog "‚ùå $errorMessage" -Color Red
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Erreur" -PercentComplete 100
        }
        
        return $false
    }
}

# Initialise le syst√®me de gestion d'identit√©
function Initialize-IdentitySystem {
    param (
        [Parameter(Mandatory=$false)]
        $ProgressBar = $null
    )
    
    Write-ConsoleLog "üîç Initialisation du syst√®me d'identit√©..." -Color Cyan
    
    try {
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Initialisation du gestionnaire GUID..." -PercentComplete 25
        }
        
        # Initialisation du module de gestion du GUID machine
        $guidInitialized = Initialize-MachineGuidManager
        
        if ($guidInitialized) {
            Write-Log "Module de gestion du GUID machine initialis√© avec succ√®s" -Level "SUCCESS"
            Write-ConsoleLog "‚úÖ Module de gestion du GUID machine initialis√©" -Color Green
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "Initialisation du gestionnaire de fichiers..." -PercentComplete 50
            }
            
            # Initialisation du module de gestion des fichiers
            $fileManagerInitialized = Initialize-FileManager
            
            if ($fileManagerInitialized) {
                Write-Log "Module de gestion des fichiers initialis√© avec succ√®s" -Level "SUCCESS"
                Write-ConsoleLog "‚úÖ Module de gestion des fichiers initialis√©" -Color Green
                
                # Mettre √† jour la barre de progression si elle est fournie
                if ($ProgressBar) {
                    Update-ProgressBar -ProgressBar $ProgressBar -Status "Syst√®me d'identit√© initialis√©" -PercentComplete 100
                }
                
                return $true
            } else {
                Write-Log "√âchec de l'initialisation du module de gestion des fichiers" -Level "ERROR"
                Write-ConsoleLog "‚ùå √âchec de l'initialisation du module de gestion des fichiers" -Color Red
                
                # Mettre √† jour la barre de progression si elle est fournie
                if ($ProgressBar) {
                    Update-ProgressBar -ProgressBar $ProgressBar -Status "Erreur d'initialisation" -PercentComplete 100
                }
                
                return $false
            }
        } else {
            Write-Log "√âchec de l'initialisation du module de gestion du GUID machine" -Level "ERROR"
            Write-ConsoleLog "‚ùå √âchec de l'initialisation du module de gestion du GUID machine" -Color Red
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "Erreur d'initialisation" -PercentComplete 100
            }
            
            return $false
        }
    }
    catch {
        $errorMessage = "Erreur lors de l'initialisation du syst√®me d'identit√©: $_"
        Write-Log $errorMessage -Level "ERROR"
        Write-ConsoleLog "‚ùå $errorMessage" -Color Red
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Erreur" -PercentComplete 100
        }
        
        return $false
    }
}

# Initialisation compl√®te du syst√®me
function Initialize-System {
    param (
        [Parameter(Mandatory=$false)]
        $ProgressBar = $null
    )
    
    Write-ConsoleLog "üîç Initialisation compl√®te du syst√®me..." -Color Cyan
    
    try {
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "V√©rification des modules..." -PercentComplete 10
        }
        
        # V√©rification des modules requis
        $modulesChecked = Test-RequiredModules
        
        if (-not $modulesChecked) {
            $errorMessage = "Modules requis manquants, initialisation impossible"
            Write-Log $errorMessage -Level "ERROR"
            Write-ConsoleLog "‚ùå $errorMessage" -Color Red
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "√âchec - Modules manquants" -PercentComplete 100
            }
            
            return @{
                Success = $false
                Message = $errorMessage
            }
        }
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "V√©rification des privil√®ges..." -PercentComplete 20
        }
        
        # V√©rification des privil√®ges administrateur
        $hasAdminRights = Test-AdminPrivileges
        
        if (-not $hasAdminRights) {
            $warningMessage = "L'application s'ex√©cute sans privil√®ges administrateur. Certaines fonctionnalit√©s peuvent √™tre limit√©es."
            Write-Log $warningMessage -Level "WARNING"
            Write-ConsoleLog "‚ö†Ô∏è $warningMessage" -Color Yellow
        }
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Initialisation du syst√®me r√©seau..." -PercentComplete 30
        }
        
        # Initialisation du syst√®me r√©seau
        $networkInitialized = Initialize-NetworkSystem -ProgressBar $ProgressBar
        
        if (-not $networkInitialized) {
            $errorMessage = "√âchec de l'initialisation du syst√®me r√©seau"
            Write-Log $errorMessage -Level "ERROR"
            Write-ConsoleLog "‚ùå $errorMessage" -Color Red
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "√âchec - Syst√®me r√©seau" -PercentComplete 100
            }
            
            return @{
                Success = $false
                Message = $errorMessage
            }
        }
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Initialisation du syst√®me d'identit√©..." -PercentComplete 60
        }
        
        # Initialisation du syst√®me d'identit√©
        $identityInitialized = Initialize-IdentitySystem -ProgressBar $ProgressBar
        
        if (-not $identityInitialized) {
            $errorMessage = "√âchec de l'initialisation du syst√®me d'identit√©"
            Write-Log $errorMessage -Level "ERROR"
            Write-ConsoleLog "‚ùå $errorMessage" -Color Red
            
            # Mettre √† jour la barre de progression si elle est fournie
            if ($ProgressBar) {
                Update-ProgressBar -ProgressBar $ProgressBar -Status "√âchec - Syst√®me d'identit√©" -PercentComplete 100
            }
            
            return @{
                Success = $false
                Message = $errorMessage
            }
        }
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Initialisation termin√©e" -PercentComplete 100
        }
        
        Write-Log "Initialisation du syst√®me termin√©e avec succ√®s" -Level "SUCCESS"
        Write-ConsoleLog "‚úÖ Syst√®me initialis√© avec succ√®s" -Color Green
        
        return @{
            Success = $true
            AdminRights = $hasAdminRights
            Message = "Syst√®me initialis√© avec succ√®s"
        }
    }
    catch {
        $errorMessage = "Erreur lors de l'initialisation du syst√®me: $_"
        Write-Log $errorMessage -Level "ERROR"
        Write-ConsoleLog "‚ùå $errorMessage" -Color Red
        
        # Mettre √† jour la barre de progression si elle est fournie
        if ($ProgressBar) {
            Update-ProgressBar -ProgressBar $ProgressBar -Status "Erreur d'initialisation" -PercentComplete 100
        }
        
        return @{
            Success = $false
            Message = $errorMessage
        }
    }
} 